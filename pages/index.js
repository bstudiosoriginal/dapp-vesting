import Image from 'next/image'
import { ethers, Contract } from "ethers";
// // A single Web3 / Ethereum provider solution for all Wallets
import Web3Modal from "web3modal";

// // yet another module used to provide rpc details by default from the wallet connected
import WalletConnectProvider from "@walletconnect/web3-provider";
// react hooks for setting and changing states of variables
import { useEffect, useState } from 'react';
import {useRouter} from 'next/navigation'
import '../app/globals.css'
// import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { env } from '../next.config';

import { useMyContext } from '../context/applicationtotalstate';

const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }


export default function Home() {

  const {provider, updateProvider} = useMyContext();

  const [contractLoader, setContractLoader] = useState(false)
  

  const [walletValid, setWalletValid] = useState(false);
  const [isOrg, setIsOrg] = useState(false)
  const [isOrganizationRegistered, setIsOrgRegistered] = useState(false)
  const [userName, setUsername] = useState("");
  const [organizationName, setOrganizationName] = useState("")
  const [enteredOrganization, setEnteredOrganization] = useState("");
  const [enteredUsername, setEnteredUsername] = useState("");

  const router = useRouter()

  

  
  async function initWallet(){
    
  try {
      setContractLoader(true)
      // check if any wallet provider is installed. i.e metamask xdcpay etc
      if (typeof window.ethereum === 'undefined') {
        console.log("Please install wallet.")
        alert("Please install wallet.")
        setContractLoader(false)
        return undefined
      }
      else{
          // raise a request for the provider to connect the account to our website
          const web3ModalVar = new Web3Modal({
            cacheProvider: false,
            providerOptions: {
            walletconnect: {
              package: WalletConnectProvider,
            },
          },
        });

        
        const instanceVar = await web3ModalVar.connect();
        const providerVar = new ethers.providers.Web3Provider(instanceVar);
        setWalletValid(true);
        updateProvider(providerVar);
        setContractLoader(false);
        return {providerVar}
      }

    } catch (error) {
      console.log(error)
      setContractLoader(false)
      if (error.code === 'CALL_EXCEPTION') {
        alert('Transaction failed:' + toString(error.reason));
      } else {
        alert(error.reason);
      }
      
      return
    }
  }

  async function setToRegisterOrg(){
    try{
    const new_state = true;
    const isreg = isOrganizationRegistered
    setIsOrg(new_state);
    if (!isreg) {
      setIsOrgRegistered(new_state);
    }
    
    return
    }catch(err){
      alert(err)
    }
  }

  async function registerOrganization(e) {
    e.preventDefault()
    try {
      if (enteredOrganization == ""){
        alert('Error: Enter valid organization name')
        return
      }
    await setToRegisterOrg()
    
    const {providerVar} = await initWallet()
    
    console.log('Is org: ', isOrg)
    console.log('Is reg: ', isOrganizationRegistered)
    const signer = providerVar.getSigner();
    const orgcontract = new Contract(
      env.ADDRESS_ORGANIZATION_CONTRACT,
      env.ABI_ORGANIZATION_CONTRACT,
      signer
    );
      const OrganizationRegistered = "OrganizationRegistered";
      orgcontract.on(OrganizationRegistered, (org) => {
        console.log('Contract event received:');
        alert('Successfully registered organization '+ toString(org.name))
        // Process event data here
      });
      const transaction = await orgcontract.registerOrganization(enteredOrganization)
      await transaction.wait()
      setOrganizationName(enteredOrganization)
    return
    } catch (error){
      if (error.code === 'CALL_EXCEPTION') {
        alert('Transaction failed:' + toString(error.reason));
      } else {
        alert(error.reason+' For user');
      }
    }
  }

  async function setToLoginOrg(){
    try{
    const new_state = true;
    const isreg = isOrganizationRegistered
    setIsOrg(new_state);
    if (isreg) {
      setIsOrgRegistered(!isreg);
    }
    
    return
    }catch(err){
      alert(err)
    }
  }

  async function loginOrganzation(e) {
    e.preventDefault()
    try{
    await setToLoginOrg()
    const {providerVar} = await initWallet()
    console.log('Is org: ', isOrg)
    console.log('Is reg: ', isOrganizationRegistered)
    const signer = providerVar.getSigner();
      const orgcontract = new Contract(
      env.ADDRESS_ORGANIZATION_CONTRACT,
      env.ABI_ORGANIZATION_CONTRACT,
      signer
    );
    console.log('Valid contract')
    const senderAddress = await signer.getAddress();
    console.log('Valid address')
    const org = await orgcontract.getOrganization(senderAddress);
    console.log('found')
    setOrganizationName(org)
    router.push({pathname: '/admin', query: {organizationName: org}})

    } catch(err){
      alert(err)
    }
  }

  async function setToLoginUser(){
    try{
    const new_state = false
    setIsOrg(new_state);
    setIsOrgRegistered(new_state);
    
    return
    }catch(err){
      alert(err)
    }
  }

  async function loginUser(e) {
    e.preventDefault()
    await setToLoginUser()
    await initWallet()
    console.log('Is org: ', isOrg)
    console.log('Is reg: ', isOrganizationRegistered)
    validateUser()
    return
  }

  async function validateUser(){
    router.push('/withdraw')
    return
  }
    

  return (
    <main className="flex min-h-screen flex-col items-center justify-between lg:p-24 ">
      <h1 className={`m-0 max-w-[30ch] text-4xl fw-700 opacity-100 pb-0 pt-24  `}>
        TokenVesting
      </h1>
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
       
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Join the winning team with your orgaization
          
        </p>
        
      </div>
      
      {/* <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
        <Image
          className="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert"
          src="/next.svg"
          alt="Next.js Logo"
          width={180}
          height={37}
          priority
        />
      </div> */}
      {/* <div className="mb-32 flex text-center min-w-400 lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
       
            
      </div> */}
      <div className="mb-32 flex flex-col lg:flex-row text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
          <div className="p-10  flex grid-cols-1">
            <div className="place-self-left">
              <form className=" grid grid-cols-1 gap-4 p-9 rounded-xl shadow-xl  lg:min-w-m  bg-gray-50">
              <button onClick={loginUser} className='px-4 py-1 bg-slate-300 flex justify-around hover:bg-slate-500 transition-all w-fill'>
                Login as User
                  </button>
                <button onClick={loginOrganzation} className='px-4 py-1 bg-slate-300 flex justify-around hover:bg-slate-500 transition-all w-fill'>
                Login as Organization
                  </button>
                 
                 
                
              </form>
            </div>
          </div>
          <div className="  p-10 flex grid-cols-1  ">
            <div className="place-self-left">
              <form className=" grid grid-cols-1 gap-4 p-9  rounded-xl  shadow-xl  bg-gray-50  mx-auto  ">
                <div className=" text-base font-semibold flex flex-row items-center text-align-center">
                  <input className="required:border-red-500 p-3" id="floatingInput" placeholder="Organization name" onChange={(e)=>{setEnteredOrganization(e.target.value);}}/>
                  {/* <label htmlFor="floatingInput">Organization Name</label> */}
                  
                </div>
                {/* <a
                  className="pointer-events-none  place-items-center gap-2 border-slate-400 border-b border-gray-300 lg:pointer-events-auto lg:p-0"
                  href="/admin"
                  target="_blank"
                  rel="noopener noreferrer"
                > */}
                  <button onClick={registerOrganization} className='px-4 py-1 bg-slate-300 flex justify-around hover:bg-slate-500 transition-all w-fill'>
                  Register Organization
                  </button>
                {/* </a> */}
                
                
              </form>
            </div>
          </div>
        </div>
      {/* <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Docs{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Find in-depth information about Next.js features and API.
          </p>
        </a>

        <a
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Learn{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Learn about Next.js in an interactive course with&nbsp;quizzes!
          </p>
        </a>
      </div> */}
    </main>
  )
}
